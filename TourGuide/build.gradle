buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.1.0")
    }
}

plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'java'
    id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    archiveFileName = 'tourGuide.jar'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation group: 'org.javamoney', name: 'moneta', version: '1.3'
    implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
    implementation(name:'gpsUtil', ext:'jar')
    implementation(name:'RewardCentral', ext:'jar')
    implementation(name:'TripPricer', ext:'jar')
    implementation group: 'org.json', name: 'json', version: '20230227'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.3'
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
}

test {
    useJUnitPlatform()

    // Spécifiez les options système pour les tests
    systemProperty 'user.language', 'en'
    systemProperty 'env', 'EN'
}

tasks.test {
    finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
}
tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory.set(layout.buildDirectory.dir("customJacocoReportDir"))
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }

    doLast {
        def reportDir = "${jacocoTestReport.reports.html.outputLocation.get().asFile}/jacocoHtml"

        // Exclude directories from the Jacoco report
        def excludedDirs = ['repository', 'model', 'dto', 'conf']

        excludedDirs.each { dir ->
            fileTree(dir: file(reportDir)) {
                exclude dir
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}